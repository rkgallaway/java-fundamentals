/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.checkerframework.dataflow.qual.TerminatesExecution;
import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void testSomeLibraryMethod() {

        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    //Feature 1 test:
    @Test
    public void testRoll(){
        //tests array length, content validation tested with helper function
        int[] testArray = Library.roll(3);
        assertEquals("array length should equal 'n'", 3, testArray.length);
    }

    @Test
    public void testRandomNumberOneToSix(){
        //not sure on statistical consistency, however instances of 1 - 6 observed when hard code number is expected
        int testNum = Library.randomNumberOneToSix();
        boolean returnStatus = false;
        if (testNum > 0 && testNum <= 6){ returnStatus = true;}
        assertTrue("I can get one random number between 1 and 6", returnStatus);
    }

    @Test
    public void testContainsDuplicates(){
        //test if duplicates contained.
        //if 7 elements in array, at least one element value MUST be duplicate
        //if 1 element in array, no possible duplicates in array
        //array of length 0 will also return false -rightfully so, no duplicates
        int[] testTrue = Library.roll(7);
        int[] testFalse = Library.roll(1);
        int[] testZero = Library.roll(0);

        assertTrue("Duplicate is detected with 7 or more rolls and returns'true'", Library.containsDuplicates(testTrue));
        assertFalse("Duplicate cannot be present in an array length on one and returns 'false'", Library.containsDuplicates(testFalse));
        assertFalse("Duplicate cannot be present in an array length on one and returns 'false'", Library.containsDuplicates(testZero));
    }

    @Test
    public void testCalculateAverage () {
        //test some array averages
        //test if array length is 0 -because an int is returned, empty array avg should equal 0 as opposed to null
        int testAverageTwoArray[] = {2, 2, 2, 2, 2, 2};
        int testArrayNoLength[] = {};
        assertEquals("array returns an average of 2", 2, Library.calculateAverage(testAverageTwoArray));
        assertEquals("array with no length returns null", 0, Library.calculateAverage(testArrayNoLength));
    }

    @Test
    public void testLowestAverage(){
        //does it work
        int[][] averageTester = {
                {1, 1, 1, 1},
                {2, 2, 2, 2},
                {3, 3, 3, 3},
                {4, 4, 4, 4}
        };
        int[] expected = new int[]{1,1,1,1};
        int[][] averageTesterNegatives = {
                {1, 1, 1, 1},
                {-2, -2, -2, -2},
                {3, 3, 3, 3},
                {4, 4, 4, 4}
        };
        //what if two arrays average is the same?  it will return the first, is this a problem?
        int[] expectedNegatives = new int[]{-2, -2, -2, -2};
        assertArrayEquals("returns the array [1, 1, 1, 1]", expected, Library.lowestAverage(averageTester));
        assertArrayEquals("returns the array [1, 1, 1, 1]", expectedNegatives, Library.lowestAverage(averageTesterNegatives));
    }

    @Test
    public void testSomeArrayList() {
        assertTrue("someArrayList should return 'true'", Library.someArrayList());
    }

    @Test
    public void testSomeHashMap() {
        assertTrue("someHashMap should return 'true'", Library.someHashMap());
    }

    @Test
    public void testSomeHashSet() {
        assertTrue("someHashSet should return 'true'", Library.someHashSet());
    }

    @Test
    public void testFindMinimumValue () {
        int[] testArrA = {7, 5, 3, 1, 7, 9, 100};
        int[] testArrB = {1, 7, 5, 3, 10, 7, 9, 100};
        int[] testArrC = {7, 5, 3, 10, 7, 9, 1};
        int[] testArrD = {7, 5, 3, -2, 7, 9, 1};
        int[] testArrE = {7, 5, 3, 0, 7, 9, 1};

        assertEquals("minimum value is found as expected at middle of array", 1, Library.findMinimumValue(testArrA));
        assertEquals("minimum value is found as expected at front of array", 1, Library.findMinimumValue(testArrB));
        assertEquals("minimum value is found as expected at end of array", 1, Library.findMinimumValue(testArrC));
        assertEquals("minimum value is found if that value is a negative number", -2, Library.findMinimumValue(testArrD));
        assertEquals("minimum value is found if that value is zero", 0, Library.findMinimumValue(testArrE));
    }

    @Test
    public void testFindMaximumValue () {
        int[] testArrA = {7, 5, 3, 100, 7, 9, 1};
        int[] testArrB = {100, 7, 5, 3, 10, 7, 9, 1};
        int[] testArrC = {7, 5, 3, 10, 7, 9, 100};
        int[] testArrD = {-7, -5, -3, -2, -7, -9, -10};
        int[] testArrE = {-7, -5, -3, 0, -7, -9, -1};

        assertEquals("minimum value is found as expected at middle of array", 100, Library.findMaximumValue(testArrA));
        assertEquals("minimum value is found as expected at front of array", 100, Library.findMaximumValue(testArrB));
        assertEquals("minimum value is found as expected at end of array", 100, Library.findMaximumValue(testArrC));
        assertEquals("minimum value is found if that value is a negative number", -2, Library.findMaximumValue(testArrD));
        assertEquals("minimum value is found if that value is zero", 0, Library.findMaximumValue(testArrE));
    }

    @Test
    public void testAnalyzeWeatherData () {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        assertTrue("returns true when an array is plugged in (prinln other values too", Library.analyzeWeatherData(weeklyMonthTemperatures));
    }

}

